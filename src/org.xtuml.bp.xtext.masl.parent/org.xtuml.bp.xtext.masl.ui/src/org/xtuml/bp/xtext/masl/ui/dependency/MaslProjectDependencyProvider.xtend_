package org.xtuml.bp.xtext.masl.ui.dependency

import com.google.inject.Inject
import com.google.inject.Singleton
import java.util.Map
import java.util.Set
import org.eclipse.core.resources.IProject
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.emf.common.util.URI
import org.xtuml.bp.core.common.DependencyData
import org.xtuml.bp.xtext.masl.dependency.MaslDependencyProvider

import static org.eclipse.xtext.ui.XtextProjectHelper.*
import static org.xtuml.bp.xtext.masl.lib.MASLContainerManager.*
import java.io.File
import java.io.FileFilter

@Singleton
class MaslProjectDependencyProvider {

    public static val DEPENDENCY_FILE_EXTENSION = "int"
    private static val DEPENDENCY_PREFIX = "dependency:"

    private Map<IProject, Set<String>> projectDependencies
    private boolean reload = true
    
    @Inject MaslDependencyProvider internalDependencyProvider
    
    def private updateDependencies() {
        if ( reload ) {
            val dependencyHandles = newHashSet
            val dependencyUris = newHashSet
            val dependencyHandleUris = newHashMap
            val dependencyUriHandles = newHashMap
            projectDependencies = newHashMap
            for ( project : ResourcesPlugin.workspace.root.projects.filter[open && hasNature(NATURE_ID)] ) {
                val projectDeps = newHashSet
                projectDependencies.put( project, projectDeps )
                val dependencies = DependencyData::getDependencies( project )
                for ( dependency : dependencies.filter[validDependency] ) {
                    val handle = project.name + CONTAINER_HANDLE_SEPARATOR + DEPENDENCY_PREFIX + dependency
                    for ( uri : getValidDependencies( dependency ).map[URI.createFileURI( it )] ) {
                        if ( dependencyUris.add( uri ) ) {
                            dependencyUriHandles.put( uri, handle )
                            if ( dependencyHandles.add( handle ) ) dependencyHandleUris.put( handle, newHashSet( uri ) as Set<URI> )
                            else dependencyHandleUris.get( handle ).add( uri )
                        }
                    }
                    projectDeps.add( handle )
                }
            }
            internalDependencyProvider.setDependencies( dependencyHandles, dependencyUris, dependencyHandleUris, dependencyUriHandles )
            //reload = false
            // At this point, we are reloading the dependencies from disk each time they are needed. If this
            // ends up being a performance liability, we may need to implement something smarter to notify
            // the dependency provider when something has changed.
        }
    }
    
    def private isValidDependency( String dependency ) {
        val dependencyFile = new File( dependency )
        ( dependencyFile.exists && dependencyFile.file && dependency.endsWith( "." + DEPENDENCY_FILE_EXTENSION ) ) ||
        ( dependencyFile.exists && dependencyFile.directory )
    }
    
    def private getValidDependencies( String dependency ) {
        val validDependencies = newArrayList
        val dependencyFile = new File( dependency )
        if ( dependencyFile.exists && dependencyFile.file && dependency.endsWith( "." + DEPENDENCY_FILE_EXTENSION ) )
            validDependencies += dependency
        else if ( dependencyFile.exists && dependencyFile.directory )
            validDependencies += dependencyFile.listFiles( new FileFilter() {
                override accept( File pathname ) {
                    pathname.name.endsWith( "." + DEPENDENCY_FILE_EXTENSION )
                }
            }).map[absolutePath]
        validDependencies
    }
    

    def public getDependencyHandles() {
        updateDependencies
        internalDependencyProvider.dependencyHandles
    }
    
    def public getDependencyUris() {
        updateDependencies
        internalDependencyProvider.dependencyUris
    }
    
    def public uriToHandle( URI uri ) {
        updateDependencies
        internalDependencyProvider.uriToHandle( uri )
    }
    
    def public handleToUris( String handle ) {
        updateDependencies
        internalDependencyProvider.handleToUris( handle )
    }
 
    
    def public getProjectDependencies( String containerHandle ) {
        updateDependencies
        val projectName = containerHandle.split( CONTAINER_HANDLE_SEPARATOR ).head
        val project = ResourcesPlugin.workspace.root.projects.filter[name==projectName].head
        if ( null != project && projectDependencies.containsKey( project ) )
            projectDependencies.get( project )
        else
            newHashSet
    }
    
}
